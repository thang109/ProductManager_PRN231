// <auto-generated />
using System;
using BookShopBusiness;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShopBusiness.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241107122935_FirstInit")]
    partial class FirstInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookShopBusiness.Books", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            BookName = "The Great Gatsby",
                            CategoryId = 1,
                            Price = 10
                        },
                        new
                        {
                            BookId = 2,
                            BookName = "Sapiens",
                            CategoryId = 2,
                            Price = 12
                        });
                });

            modelBuilder.Entity("BookShopBusiness.Categories", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Fiction"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Non-fiction"
                        });
                });

            modelBuilder.Entity("BookShopBusiness.Shippings", b =>
                {
                    b.Property<int>("ShippingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("BooksBookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateBooking")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateShip")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationShip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserApproveId")
                        .HasColumnType("int");

                    b.Property<int?>("UserOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("ShippingId");

                    b.HasIndex("BookId");

                    b.HasIndex("BooksBookId");

                    b.HasIndex("UserApproveId");

                    b.HasIndex("UserOrderId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Shippings");

                    b.HasData(
                        new
                        {
                            ShippingId = 1,
                            BookId = 1,
                            DateBooking = new DateTime(2024, 11, 7, 19, 29, 35, 402, DateTimeKind.Local).AddTicks(6748),
                            DateShip = new DateTime(2024, 11, 9, 19, 29, 35, 402, DateTimeKind.Local).AddTicks(6789),
                            LocationShip = "New York",
                            Status = "isApprove",
                            UserApproveId = 2,
                            UserOrderId = 1
                        },
                        new
                        {
                            ShippingId = 2,
                            BookId = 2,
                            DateBooking = new DateTime(2024, 11, 7, 19, 29, 35, 402, DateTimeKind.Local).AddTicks(6814),
                            DateShip = new DateTime(2024, 11, 10, 19, 29, 35, 402, DateTimeKind.Local).AddTicks(6815),
                            LocationShip = "California",
                            Status = "isApprove",
                            UserApproveId = 1,
                            UserOrderId = 2
                        });
                });

            modelBuilder.Entity("BookShopBusiness.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "password123",
                            UserName = "Test1"
                        },
                        new
                        {
                            UserId = 2,
                            Password = "password456",
                            UserName = "Test2"
                        });
                });

            modelBuilder.Entity("BookShopBusiness.Books", b =>
                {
                    b.HasOne("BookShopBusiness.Categories", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookShopBusiness.Shippings", b =>
                {
                    b.HasOne("BookShopBusiness.Books", "Books")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopBusiness.Books", null)
                        .WithMany("Shippings")
                        .HasForeignKey("BooksBookId");

                    b.HasOne("BookShopBusiness.Users", "UserApprove")
                        .WithMany()
                        .HasForeignKey("UserApproveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookShopBusiness.Users", "UserOrder")
                        .WithMany()
                        .HasForeignKey("UserOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BookShopBusiness.Users", null)
                        .WithMany("Shippings")
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Books");

                    b.Navigation("UserApprove");

                    b.Navigation("UserOrder");
                });

            modelBuilder.Entity("BookShopBusiness.Books", b =>
                {
                    b.Navigation("Shippings");
                });

            modelBuilder.Entity("BookShopBusiness.Categories", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookShopBusiness.Users", b =>
                {
                    b.Navigation("Shippings");
                });
#pragma warning restore 612, 618
        }
    }
}
